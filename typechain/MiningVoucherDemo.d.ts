/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MiningVoucherDemoInterface extends ethers.utils.Interface {
  functions: {
    "claim(uint256)": FunctionFragment;
    "mining()": FunctionFragment;
    "miningUnits(address)": FunctionFragment;
    "unitDecimals()": FunctionFragment;
    "voucherAddress()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "mining", values?: undefined): string;
  encodeFunctionData(functionFragment: "miningUnits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unitDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voucherAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mining", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "miningUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voucherAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class MiningVoucherDemo extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MiningVoucherDemoInterface;

  functions: {
    claim(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mining()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    miningUnits(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "miningUnits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unitDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "unitDecimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    voucherAddress(overrides?: CallOverrides): Promise<[string]>;

    "voucherAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  claim(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mining(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mining()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  miningUnits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "miningUnits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unitDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  "unitDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  voucherAddress(overrides?: CallOverrides): Promise<string>;

  "voucherAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim(amount_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mining(overrides?: CallOverrides): Promise<void>;

    "mining()"(overrides?: CallOverrides): Promise<void>;

    miningUnits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "miningUnits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unitDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "unitDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    voucherAddress(overrides?: CallOverrides): Promise<string>;

    "voucherAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    claim(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(uint256)"(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mining()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    miningUnits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "miningUnits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unitDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "unitDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    voucherAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "voucherAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mining()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    miningUnits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "miningUnits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unitDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unitDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voucherAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "voucherAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
